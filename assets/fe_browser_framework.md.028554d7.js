import{_ as o,o as e,c as a,Q as t}from"./chunks/framework.7b60570d.js";const r="/portal/images/browser/working-principle-01.png",c="/portal/images/browser/working-principle-02.png",d="/portal/images/browser/paint-records.png",l="/portal/images/browser/gpu.png",s="/portal/images/browser/relayout.png",i="/portal/images/browser/repaint.png",n="/portal/images/browser/compositing.png",x=JSON.parse('{"title":"浏览器工作原理","description":"","frontmatter":{},"headers":[],"relativePath":"fe/browser/framework.md","lastUpdated":1705323905000}'),p={name:"fe/browser/framework.md"},h=t('<h1 id="浏览器工作原理" tabindex="-1">浏览器工作原理 <a class="header-anchor" href="#浏览器工作原理" aria-label="Permalink to &quot;浏览器工作原理&quot;">​</a></h1><p>从一道高频面试题来探究浏览器的工作原理</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>问题：从在浏览器地址栏输入直到在屏幕上看到页面的整个过程中都发生了些什么？</p></div><p>从地址栏输入到页面展示，大体上可分成两大流程：<strong>导航流程</strong> 和 <strong>渲染流程</strong></p><h2 id="一、导航流程" tabindex="-1">一、导航流程 <a class="header-anchor" href="#一、导航流程" aria-label="Permalink to &quot;一、导航流程&quot;">​</a></h2><p><img src="'+r+'" alt="http-cache"></p><h3 id="_1-1、用户输入-浏览器进程" tabindex="-1">1.1、用户输入（浏览器进程） <a class="header-anchor" href="#_1-1、用户输入-浏览器进程" aria-label="Permalink to &quot;1.1、用户输入（浏览器进程）&quot;">​</a></h3><p>当用户在地址栏中输入一个查询关键字，地址栏会判断这个关键字是 <strong>请求 URL</strong> 还是 <strong>查询内容</strong></p><ul><li><strong>查询内容</strong>：默认搜索引擎 + 关键字组成新的 <code>URL</code></li><li><strong>请求 URL</strong>：请求<code>URL</code> + 协议 组成完整的 <code>URL</code>， <code>eg: baidu.com =&gt; https://www.baidu.com/</code></li></ul><p><strong>当前浏览器状态</strong></p><ul><li><code>Tab</code> 标签页左侧 <code>icon</code> 图标变成 <code>loading</code> 状态</li><li>页面还是显示当前页面内容</li></ul><p><strong><code>beforeunload</code> 事件</strong></p><ul><li>当按下 <code>enter</code> 后，当前页面将会被替换成新的页面，在这之前，当前页面可执行  <code>beforeunload</code> 事件</li><li><code>beforeunload</code> 事件中执行数据清理、询问用户是否离开当前页（表单页面未提交）等，可用户可以通过 <code>beforeunload</code> 事件来取消导航</li></ul><h3 id="_1-2、url请求流程-网络进程" tabindex="-1">1.2、<code>URL</code>请求流程（网络进程） <a class="header-anchor" href="#_1-2、url请求流程-网络进程" aria-label="Permalink to &quot;1.2、`URL`请求流程（网络进程）&quot;">​</a></h3><p>当完整 URL 请求准备好后，<strong>浏览器进程</strong>会通过 <code>IPC</code> 将 <code>URL</code>请求发给<strong>网络进程</strong>，网络进程收到<code>URL</code>请求后，才发起真正的 <code>URL</code>请求</p><h4 id="_1-2-1、判断是否-命中-强缓存" tabindex="-1">1.2.1、判断是否“命中” 强缓存？ <a class="header-anchor" href="#_1-2-1、判断是否-命中-强缓存" aria-label="Permalink to &quot;1.2.1、判断是否“命中” 强缓存？&quot;">​</a></h4><ul><li>若命中，返回缓存资源给浏览器进程，<code>HTTP</code> 状态码 <code>200</code>；</li><li>反之，进入网络请求流程</li></ul><h4 id="_1-2-2、网络请求流程" tabindex="-1">1.2.2、网络请求流程 <a class="header-anchor" href="#_1-2-2、网络请求流程" aria-label="Permalink to &quot;1.2.2、网络请求流程&quot;">​</a></h4><ul><li><strong>DNS 域名解析</strong></li></ul><p>获取请求域名的服务器<code>IP</code>地址。端口号未明确指定的，使用默认端口，<code>HTTP</code> 默认 80，<code>HTTPS</code> 默认 443，</p><p>如果请求协议是 <code>HTTPS</code>，那么还需要建立 <code>TLS</code> 连接</p><ul><li><strong>TCP 连接数量判断</strong></li></ul><p><code>Chrome</code>存在一机制，同一域名最多同时存在 6 个<code>TCP</code>连接，后续的需要排队等候，未超过 6 个直接建立连接</p><ul><li><p><strong>构建请求行、请求头，发送请求信息</strong></p></li><li><p><strong>服务端返回响应数据</strong></p></li></ul><h4 id="_1-2-3、处理响应数据" tabindex="-1">1.2.3、处理响应数据 <a class="header-anchor" href="#_1-2-3、处理响应数据" aria-label="Permalink to &quot;1.2.3、处理响应数据&quot;">​</a></h4><p><strong>是否重定向？</strong></p><p>当返回的状态码是 <code>301</code> 或 <code>302</code>，表示重定向，<strong>网络进程</strong>会从响应头的 <code>Location</code> 字段里面读取重定向的地址, 重新发起 <code>HTTP/HTTPS</code> 请求。</p><p><code>301</code>：永久重定向；<code>302</code> 暂时重定向</p><p>非重定向，=&gt; next</p><p><strong>判断相应数据类型</strong></p><p><code>Content-Type</code>: 浏览器根据响应头中该字段判断服务器返回的响应体数据类型</p><ul><li><code>application/octet-stream</code>：字节流类型。浏览器会将数据传递给<strong>下载管理器</strong>做进一步的文件下载或预览等工作</li><li><code>text/html : html</code> 格式: =&gt; next</li></ul><h3 id="_1-3、准备渲染进程-浏览器进程" tabindex="-1">1.3、准备渲染进程（浏览器进程） <a class="header-anchor" href="#_1-3、准备渲染进程-浏览器进程" aria-label="Permalink to &quot;1.3、准备渲染进程（浏览器进程）&quot;">​</a></h3><p>对于新页面，采用的渲染进程如下：</p><ul><li>1、默认情况，打开新的页面都会使用单独的渲染进程</li><li>2、<strong>同一站点</strong>情况，在 A 页面打开 B 页面，A、B 页面属于同一站点，那么 B 就复用 A 的渲染进程</li></ul><blockquote><p>❓思考：浏览器进程何时开始准备一个渲染进程？</p></blockquote><ul><li>当浏览器进程将 请求<code>URL</code> 传递给网络进程时，就知道了要访问的站点，此时浏览器进程就可以开始查找或启动一个渲染进程，这个动作与让网络线程下载数据是同时的。</li><li>当然，如果出现重定向的请求时，提前初始化的渲染进程可能就不会被使用了</li></ul><h3 id="_1-4、提交文档-浏览器进程" tabindex="-1">1.4、提交文档（浏览器进程） <a class="header-anchor" href="#_1-4、提交文档-浏览器进程" aria-label="Permalink to &quot;1.4、提交文档（浏览器进程）&quot;">​</a></h3><p>含义：<strong>浏览器进程</strong> 将 <strong>网络进程</strong>接收到的 <code>HTML</code> 数据提交给<strong>渲染进程</strong></p><p>步骤：</p><ul><li><p>1、<code>浏览器进程</code> 接收到 <code>网络进程</code>的响应头数据后，立即向 <code>渲染进程</code> 发起 <strong>“提交文档”</strong> 的消息</p></li><li><p>2、<code>渲染进程</code>接收到<strong>提交文档</strong>消息后，与<code>网络进程</code>之间建立传输数据的 <strong>管道</strong></p></li><li><p>3、等文档数据传输完成后，<code>渲染进程</code>发送 <strong>确定提交</strong> 的消息给<code>浏览器进程</code></p></li><li><p>4、<code>浏览器进程</code>收到 <strong>确定提交</strong> 的消息后，会更新界面状态，包括安全状态、地址栏 URL、前进后退的历史状态, 并更新 Web 页面。</p></li></ul><p>(PS: 👇 此时 Tab 标签左侧的 icon 图标还是<code>Loading</code>状态)</p><p><img src="'+c+'" alt="working-principle"></p><h2 id="二、渲染流程-渲染进程" tabindex="-1">二、渲染流程(渲染进程) <a class="header-anchor" href="#二、渲染流程-渲染进程" aria-label="Permalink to &quot;二、渲染流程(渲染进程)&quot;">​</a></h2><p><strong>渲染进程</strong>负责所有发生在浏览器页签中的事情。在一个渲染进程中，</p><ul><li><strong>主线程</strong>负责解析，编译或运行代码等工作，当我们使用 <code>Worker</code> 时，<code>Worker</code>线程会负责运行一部分代码</li><li><strong>合成线程</strong>和<strong>光栅线程</strong>是也是运行在渲染进程中的，负责更高效和顺畅的渲染页面</li></ul><h3 id="_2-1、构建-dom-树" tabindex="-1">2.1、构建 DOM 树 <a class="header-anchor" href="#_2-1、构建-dom-树" aria-label="Permalink to &quot;2.1、构建 DOM 树&quot;">​</a></h3><p><code>HTML</code> 文件经过 <code>HTML</code> 解析器解析，输出树状结构的 <code>DOM</code></p><h3 id="_2-2、样式计算" tabindex="-1">2.2、样式计算 <a class="header-anchor" href="#_2-2、样式计算" aria-label="Permalink to &quot;2.2、样式计算&quot;">​</a></h3><p>计算中 <code>DOM</code> 节点中每个元素的具体样式 。分成以下三步</p><h4 id="_2-2-1、构建-stylesheets" tabindex="-1">2.2.1、构建 styleSheets <a class="header-anchor" href="#_2-2-1、构建-stylesheets" aria-label="Permalink to &quot;2.2.1、构建 styleSheets&quot;">​</a></h4><p>渲染引擎将 <code>CSS</code> 文本转换成浏览器可以理解的结构：<code>styleSheets</code></p><h4 id="_2-2-2、属性值的标准化" tabindex="-1">2.2.2、属性值的标准化 <a class="header-anchor" href="#_2-2-2、属性值的标准化" aria-label="Permalink to &quot;2.2.2、属性值的标准化&quot;">​</a></h4><p>将类似 <code>red、bold、2em</code> 等值转换成渲染引擎容易理解的、标准化的计算值 <code>rgb(255, 0, 0)、700、32px</code> 等</p><h4 id="_2-2-3、计算每个节点的具体样式" tabindex="-1">2.2.3、计算每个节点的具体样式 <a class="header-anchor" href="#_2-2-3、计算每个节点的具体样式" aria-label="Permalink to &quot;2.2.3、计算每个节点的具体样式&quot;">​</a></h4><ul><li><strong>继承</strong></li></ul><p><code>CSS</code> 继承是指每个 DOM 节点都包含着父节点的样式。然而并不是所有的样式属性都可以继承</p><ul><li><strong>层叠</strong></li></ul><p><code>CSS</code> 层叠处于 <code>CSS</code> 核心地位，<strong>定义如何合并来自多个源的属性值的算</strong>法。最终计算输出的属性，可在控制台的 <code>ComputedStyle</code> 中查看到</p><h3 id="_2-3、布局" tabindex="-1">2.3、布局 <a class="header-anchor" href="#_2-3、布局" aria-label="Permalink to &quot;2.3、布局&quot;">​</a></h3><p>计算出 <code>DOM</code> 树中可见元素的几何位置。分成以下俩步</p><h4 id="_2-3-1、创建布局树" tabindex="-1">2.3.1、创建布局树 <a class="header-anchor" href="#_2-3-1、创建布局树" aria-label="Permalink to &quot;2.3.1、创建布局树&quot;">​</a></h4><p>将 <code>DOM</code> 树中所有可见节点，添加到布局树中，而不可见的节点会被过滤掉，像 <code>head</code> 标签下内容，属性值 <code>display: none</code> 的节点等</p><p>同时，当我们使用一个包含内容的伪元素（例如 <code>p::before {content: &#39;Hi!&#39;}</code> ）时，元素会出现在布局树中而不存在于 <code>DOM</code> 树中，这也是为什么<strong>使用 DOM 提供的 API 无法获取伪元素</strong>的原因</p><h4 id="_2-3-2、布局计算" tabindex="-1">2.3.2、布局计算 <a class="header-anchor" href="#_2-3-2、布局计算" aria-label="Permalink to &quot;2.3.2、布局计算&quot;">​</a></h4><h3 id="_2-4、分层" tabindex="-1">2.4、分层 <a class="header-anchor" href="#_2-4、分层" aria-label="Permalink to &quot;2.4、分层&quot;">​</a></h3><p>渲染引擎需要对特定的节点生成专门的图层，并生成一颗对于的图层树。浏览器的页面的页面实际上被分成多个图层，这些 <strong>图层叠加后合成了最终的页面</strong> ，但不是每个节点都会生成一个图层，如果一个节点没有图层，那它就属于父节点的图层</p><p>对开发者来说，当某一部分需要用独立的层渲染，我们可以使用 <code>css</code> 属性<code>will-change</code>让浏览器创建层</p><blockquote><p>❓ ：节点需要满足什么条件？渲染引擎才会为节点创建新的图层？</p></blockquote><ul><li>拥有层叠上下文属性的元素会被提升为单独一层，关于层叠上下文</li><li>需要裁剪（clip）的地方会被创建为图层</li><li><code>&lt;video&gt;</code>,<code>&lt;iframe&gt;</code> 等元素也会创建单独图层</li></ul><h3 id="_2-5、图层绘制" tabindex="-1">2.5、图层绘制 <a class="header-anchor" href="#_2-5、图层绘制" aria-label="Permalink to &quot;2.5、图层绘制&quot;">​</a></h3><h4 id="_2-5-1、生成待绘制列表-主线程" tabindex="-1">2.5.1、生成待绘制列表（主线程） <a class="header-anchor" href="#_2-5-1、生成待绘制列表-主线程" aria-label="Permalink to &quot;2.5.1、生成待绘制列表（主线程）&quot;">​</a></h4><p><strong>主线程</strong>会把每一个图层的绘制拆分成很小的绘制指令，然后把这些指令按照顺序组成一个<strong>待绘制列表</strong></p><p><img src="'+d+'" alt="http-cache"></p><h4 id="_2-5-2、栅格化-合成线程" tabindex="-1">2.5.2、栅格化（合成线程） <a class="header-anchor" href="#_2-5-2、栅格化-合成线程" aria-label="Permalink to &quot;2.5.2、栅格化（合成线程）&quot;">​</a></h4><p>当图层的绘制列表准备好后，<code>主线程</code>会把绘制列表提交给<code>合成线程</code>。因为图层很大，而每次所看到的视口很小，没必要一次性绘制图层所有内容，</p><p>所以<code>合成线程</code>会将图层划分成 <strong>图块</strong>（<code>tile</code>）,大小通常是 <code>256*256</code>  或 <code>512*512</code>。合成线程会按照视口附件的图块来优先生成位图, 实际生成位图的操作是由栅格化来执行的。</p><p>所谓<strong>栅格化</strong>，是指将<strong>图块转化成位图</strong></p><p>图块是栅格化最小执行单位，渲染进程中存在一个栅格化线程池，负责所有图块的栅格化</p><p><strong>GPU 加速</strong></p><p>栅格化过程通常使用 <code>GPU</code> 来加速生成，所有，此过程也叫做 <strong><code>GPU</code>栅格化</strong>，生成的位图都保留在 <code>GPU</code> 内存中</p><p><img src="'+l+'" alt="http-cache"></p><h4 id="_2-5-3、合成显示" tabindex="-1">2.5.3、合成显示 <a class="header-anchor" href="#_2-5-3、合成显示" aria-label="Permalink to &quot;2.5.3、合成显示&quot;">​</a></h4><p>当所有图块被栅格化成位图，<code>合成线程</code>会生成一个绘制图块的命令 <code>DrawQuad</code> 提交给<code>浏览器进程</code></p><p><code>浏览器进程</code>中的 <code>viz</code> 组件接收到该命令后，将页面内容绘制到内存中，最终将内存显示在屏幕上</p><h3 id="_2-6、重排、重绘与合成" tabindex="-1">2.6、重排、重绘与合成 <a class="header-anchor" href="#_2-6、重排、重绘与合成" aria-label="Permalink to &quot;2.6、重排、重绘与合成&quot;">​</a></h3><ul><li><strong>重排</strong></li></ul><p>修改元素的宽、高、位置等。重排需要更新完整的渲染流水线，开销最大</p><p><img src="'+s+'" alt="http-cache"></p><ul><li><strong>重绘</strong></li></ul><p>修改元素的背景色、字体颜色等。重绘省去了布局和分层阶段，效率比重排高</p><p><img src="'+i+'" alt="http-cache"></p><ul><li><strong>合成</strong></li></ul><p>修改一个既不要布局也不要绘制的属性，渲染引擎将跳过布局和绘制，只执行最后面的合成操作。</p><p>使用 CSS 的 <code>transform</code> 实现动画，能避开重排和重绘，是直接在非主线程上执行动画，不占用主线程的资源</p><p><img src="'+n+'" alt="http-cache"></p><p>可使用 <img src="https://csstriggers.com/" alt="csstriggers"> 工具查看 CSS 某个属性的修改是否会导致重排、重绘以及合成等</p>',97),g=[h];function u(_,b,m,q,P,f){return e(),a("div",null,g)}const T=o(p,[["render",u]]);export{x as __pageData,T as default};
