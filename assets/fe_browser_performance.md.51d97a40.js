import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.7b60570d.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fe/browser/performance.md","lastUpdated":1705323905000}'),p={name:"fe/browser/performance.md"},e=l(`<p>Web 性能优化主要是为了提升用户体验，用户最直观的感受就是看页面是否卡顿，是否卡顿是直观感受，所以需要一些 <strong>Web 性能指标</strong> 来监测，同时需要掌握浏览器渲染的整个过程，整个过程分成 <strong>页面导航</strong> 和 <strong>页面渲染</strong> 两个部分，可针对不同部分进行优化，具体细节参考文章 <a href="https://yangjia23.github.io/portal-blog/frontend-graph/%E6%B5%8F%E8%A7%88%E5%99%A8/3%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html" target="_blank" rel="noreferrer">浏览器的工作原理</a>。 最后性能优化还包括开发时所使用的 <strong>框架、打包工具以及代码层面的优化</strong></p><p>所以，Web 性能优化可大致分成一些部分</p><ul><li>Web 性能指标</li><li>HTTP 网络层面优化（页面导航）</li><li>DOM 层面优化（页面渲染）</li><li>框架、打包工具以及代码层面优化 (开发阶段)</li></ul><h2 id="一、web-性能指标" tabindex="-1">一、Web 性能指标 <a class="header-anchor" href="#一、web-性能指标" aria-label="Permalink to &quot;一、Web 性能指标&quot;">​</a></h2><h2 id="二、http-网络层面优化" tabindex="-1">二、HTTP 网络层面优化 <a class="header-anchor" href="#二、http-网络层面优化" aria-label="Permalink to &quot;二、HTTP 网络层面优化&quot;">​</a></h2><p>HTTP 网络层面优化是指页面导航阶段，也就是浏览器输入 URL 到服务器返回 HTML 字符串这个阶段，主要分成以下步骤</p><blockquote><p>URL 解析 -&gt; 缓存检查 -&gt; DNS 解析 -&gt; TCP 连接 -&gt; 数据传输 -&gt; TCP 断开连接</p></blockquote><h3 id="_2-1、dns-解析" tabindex="-1">2.1、DNS 解析 <a class="header-anchor" href="#_2-1、dns-解析" aria-label="Permalink to &quot;2.1、DNS 解析&quot;">​</a></h3><ul><li><p>DNS 解析流程及原理</p></li><li><p>优化方案</p></li></ul><p><code>DNS Prefetch</code>, DNS 预解析</p><p>方法一: 在 <code>index.html</code> 的 <code>&lt;head&gt;</code> 中添加 👇，(前端控制)</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dns-prefetch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">//d.jd.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">//京东</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>方法二: 在 <code>index.html</code> 的 <code>响应头</code> 中添加 👇，(后端控制)</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Link: &lt;https://d.jd.com&gt;; rel=dns-prefetch</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-2、tcp-连接" tabindex="-1">2.2、TCP 连接 <a class="header-anchor" href="#_2-2、tcp-连接" aria-label="Permalink to &quot;2.2、TCP 连接&quot;">​</a></h3><p>默认情况下，每个请求都会建立 TCP 连接，十分消耗性能，如何优化？</p><h4 id="_2-2-1、连接复用" tabindex="-1">2.2.1、连接复用 <a class="header-anchor" href="#_2-2-1、连接复用" aria-label="Permalink to &quot;2.2.1、连接复用&quot;">​</a></h4><p><strong><code>http 1.0</code></strong> 阶段，每个请求都会建立单独的 TCP 连接</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">请求A: 开启TCP -&gt; 请求 -&gt; 响应 -&gt; 断开TCP</span></span>
<span class="line"><span style="color:#A6ACCD;">请求B: 开启TCP -&gt; 请求 -&gt; 响应 -&gt; 断开TCP</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong><code>http 1.1</code></strong> 阶段，设置请求头 <code>Connection: keep-alive</code> 即可开启连接复用，多个请求使用同一个 TCP 连接，不单独进行创建</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">开启TCP -&gt; A请求 -&gt; A响应 -&gt; B请求 -&gt; B响应 -&gt; 断开TCP</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当两个请求的间隔时间过长，TCP 连接一直处于空闲阶段，可通过添加 <code>Keep-Alive</code> 消息头，来指定一个空闲 TCP 连接需要保持打开状态的最小时长, 例如 👇</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#A6ACCD;">Connection: Keep-Alive</span></span>
<span class="line"><span style="color:#A6ACCD;">Keep-Alive: timeout=5, max=1000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>属性值分别表示：</p><ul><li><code>timeout</code>: 一个空闲 TCP 连接需要保持打开状态的最小时长（以秒为单位）</li><li><code>max</code>: 在 TCP 连接关闭之前，在此连接可以发送的请求的最大值 (<strong>HTTP 管道连接</strong>则可以用它来限制管道的使用)</li></ul><h4 id="_2-2-2、并行化连接" tabindex="-1">2.2.2、并行化连接 <a class="header-anchor" href="#_2-2-2、并行化连接" aria-label="Permalink to &quot;2.2.2、并行化连接&quot;">​</a></h4><p>当 HTML 中需要加载 CSS,JS, 静态文件时，浏览器会同时并行发送多个 TCP 连接，提高页面加载效率，但浏览器对同一域名下的 <strong>TCP 连接数</strong> 有限制（Chrome 限制数大概是 6 个）</p><p>所以当同一域名下的 TCP 连接数达到上限后，后面的请求可以复用前面的 TCP 连接</p><h4 id="_2-2-3、管道化" tabindex="-1">2.2.3、管道化 <a class="header-anchor" href="#_2-2-3、管道化" aria-label="Permalink to &quot;2.2.3、管道化&quot;">​</a></h4><p>http 请求总是顺序发送的，下一个请求只有在当前请求的响应被完全接受的时候才会被发送，而 HTTP/1.1 允许多个 http 请求通过一个套接字同时被发送，然后请求者就会等待各自的响应，这些响应是按照之前请求的顺序依次到达，请求和响应都需要保持一个 <strong><code>FIFO队列</code></strong> 顺序。（ ps: <code>服务器先后收到A，B请求，处理A需要10ms，处理B需要1ms，但 B不能立即返回，需等待A处理完，按照A,B 顺序依次返回</code> ）</p><p>只有幂等的请求才可以被管道化，比如<code>GET</code>和<code>HEAD</code>。<code>POST</code>和<code>PUT</code>不应该被管道化，HTTP 管道化本身可能会导致<strong>队头阻塞</strong>的问题，默认情况下，浏览器是关闭了 HTTP 管道化</p><blockquote><p>HTTP/方法的幂等性: 是指一次和多次请求某一个资源应该具有同样的副作用, 实际上就是多次操作都不会改变结果的请求</p></blockquote><h3 id="_2-3、http2-0" tabindex="-1">2.3、HTTP2.0 <a class="header-anchor" href="#_2-3、http2-0" aria-label="Permalink to &quot;2.3、HTTP2.0&quot;">​</a></h3><p>针对 <code>HTTP1.1</code> 中管道化导致的队头阻塞，可使用 <code>HTTP2</code> 来解决</p><h4 id="_2-3-1、多路复用" tabindex="-1">2.3.1、多路复用 <a class="header-anchor" href="#_2-3-1、多路复用" aria-label="Permalink to &quot;2.3.1、多路复用&quot;">​</a></h4><p><code>HTTP2</code> 中不使用管道化，而是引入<strong>流</strong> (<code>Stream</code>)和 <strong>帧</strong>（<code>Frame</code>）的概念</p><ul><li>一个帧由<code>Length + Type + Flags + StreamID + Payload</code> 五部分组成，前四部分是固定长度，为 9 个字节，第五部分长度为 <code>2^14</code> 至 <code>2^24 - 1</code>, 即 <code>16Kb</code> 到 <code>16Mb</code></li><li>请求头和响应头都会被发送方压缩后，分成几个连续的 <code>Frame</code> 传输，头字段会保存在 <code>Payload</code> 中，接收方拼合这些 <code>Frame</code> 后，解压后即可拿到真正的请求头和响应头</li><li>一个流由双向传输的有序且连续的 <code>Frame</code> 组成，一个 TCP 连接可以同时包含多个 <code>Stream</code> ，一个 <code>Stream</code> 只用于一次请求和响应。<code>Stream</code> 之间不会相互影响</li></ul><h4 id="_2-3-2、服务器推送" tabindex="-1">2.3.2、服务器推送 <a class="header-anchor" href="#_2-3-2、服务器推送" aria-label="Permalink to &quot;2.3.2、服务器推送&quot;">​</a></h4><blockquote><p>服务器推送 Server Push: 服务器可以提前主动将未来将要请求的资源推送到客户端，客户端接收资源后会进行缓存，后面直接读取缓存即可</p></blockquote><p><strong>如何设置 Server Push ？</strong></p><ul><li>使用 nginx 中 <code>http2_push</code> 字段设置推送资源</li></ul><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;"> root </span><span style="color:#A6ACCD;">/usr/share/nginx/html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;"> index </span><span style="color:#A6ACCD;">index.html index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;"> http2_push </span><span style="color:#A6ACCD;">/style.css</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;"> http2_push </span><span style="color:#A6ACCD;">/example.png</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>在 nginx 中开启 <code>Server Push</code>, 在响应头中设置推送资源</li></ul><p>开启推送</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;"> http2_push_preload </span><span style="color:#A6ACCD;">on</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 <code>index.html</code> 响应头中添加</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Link:&lt;/style.css&gt;; rel=preload; as=style</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Server Push 的缺陷？</strong></p><ul><li>前端资源通过打包工具打包后，文件名都是带有 <code>hash</code> 值的，每次打包后都更改 nginx 配置，不合实际</li></ul><h3 id="_2-4、http-1-1" tabindex="-1">2.4、HTTP 1.1 <a class="header-anchor" href="#_2-4、http-1-1" aria-label="Permalink to &quot;2.4、HTTP 1.1&quot;">​</a></h3><p>当我们的服务因为某些原因无法使用 HTTP2.0，那么在 HTTP 1.1 阶段有哪些优化方案？</p><h4 id="_2-4-1-资源合并" tabindex="-1">2.4.1 资源合并 <a class="header-anchor" href="#_2-4-1-资源合并" aria-label="Permalink to &quot;2.4.1 资源合并&quot;">​</a></h4><p>CSS 雪碧图 -&gt; <code>Icon Font</code> -&gt; <code>SVG Symbols</code></p><h4 id="_2-4-2-资源内联" tabindex="-1">2.4.2 资源内联 <a class="header-anchor" href="#_2-4-2-资源内联" aria-label="Permalink to &quot;2.4.2 资源内联&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">小图片 -&gt; data URL</span></span>
<span class="line"><span style="color:#A6ACCD;">小 CSS 文件 -&gt; \`&lt;style&gt;...&lt;/style&gt;\`</span></span>
<span class="line"><span style="color:#A6ACCD;">小 JS 文件 -&gt; \`&lt;script&gt;...&lt;/script&gt;\`</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>以上都可通过 webpack 插件来实现</p><h4 id="_2-4-3-资源压缩" tabindex="-1">2.4.3 资源压缩 <a class="header-anchor" href="#_2-4-3-资源压缩" aria-label="Permalink to &quot;2.4.3 资源压缩&quot;">​</a></h4><p>目前最常用的压缩算法是 gzip, 具体实现如下</p><p><strong><code>nginx</code></strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">server {</span></span>
<span class="line"><span style="color:#A6ACCD;">  gzip on;</span></span>
<span class="line"><span style="color:#A6ACCD;">  gzip_types      text/plain application/xml;</span></span>
<span class="line"><span style="color:#A6ACCD;">  gzip_proxied    no-cache no-store private expired auth;</span></span>
<span class="line"><span style="color:#A6ACCD;">  gzip_min_length 1000;</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>nginx 实际提供俩种 gzip 模式: <code>gzip on</code> 和 <code>gzip_static on</code>, 区别如下：</p><ul><li><code>gzip on</code> 会在每次请求时实时压缩文件，耗费性能</li><li><code>gzip_static on</code> 优先级更高，在遇到 <code>path/to/file</code> 的请求时，会优先查看 <code>path/to/file.gz</code> 作为压缩版本，找不到就直接返回未压缩版本。该功能需要在编译 nginx 时添加扩展选项</li><li>可通过 webpack 插件 <code>compression-webpack-plugin</code> 生成 <code>.gz</code> 后缀文件，同时默认保留源文件</li></ul><p><strong><code>Apache</code></strong></p><p>参考文档 <a href="https://ubiq.co/tech-blog/enable-gzip-compression-apache/" target="_blank" rel="noreferrer">How To Enable GZIP Compression in Apache</a></p><p><strong><code>Node.js</code></strong></p><p>参考文档 <a href="https://nodejs.org/api/zlib.html#zlib_compressing_http_requests_and_responses" target="_blank" rel="noreferrer">Node Zlib</a></p><ul><li>核心代码</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> acceptEncoding </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headers[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">accept-encoding</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">acceptEncoding) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">acceptEncoding</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Note: This is not a conformant accept-encoding parser.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">\\b</span><span style="color:#C3E88D;">deflate</span><span style="color:#89DDFF;font-style:italic;">\\b</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(acceptEncoding)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Encoding</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deflate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">pipeline</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">raw</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">zlib</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createDeflate</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onError</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">\\b</span><span style="color:#C3E88D;">gzip</span><span style="color:#89DDFF;font-style:italic;">\\b</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(acceptEncoding)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Encoding</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gzip</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">pipeline</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">raw</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">zlib</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createGzip</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onError</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">\\b</span><span style="color:#C3E88D;">br</span><span style="color:#89DDFF;font-style:italic;">\\b</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(acceptEncoding)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Encoding</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">br</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">pipeline</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">raw</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">zlib</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createBrotliCompress</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onError</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">pipeline</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">raw</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">onError</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>缺陷：对压缩的结果没有做缓存</p><h4 id="_2-4-4、资源精简" tabindex="-1">2.4.4、资源精简 <a class="header-anchor" href="#_2-4-4、资源精简" aria-label="Permalink to &quot;2.4.4、资源精简&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HTML: 删空格，删闭合</span></span>
<span class="line"><span style="color:#A6ACCD;">CSS: 删未用 class (不推荐，可能存在动态 class )</span></span>
<span class="line"><span style="color:#A6ACCD;">JS:  代码压缩(改名)、tree shaking (通过分析 import)</span></span>
<span class="line"><span style="color:#A6ACCD;">SVG: 删除无用标签，属性</span></span>
<span class="line"><span style="color:#A6ACCD;">图片： 减少体积（无损和有损）</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>以上操作都可通过 webpack 插件实现</p><h4 id="_2-4-5、cookie-优化" tabindex="-1">2.4.5、Cookie 优化 <a class="header-anchor" href="#_2-4-5、cookie-优化" aria-label="Permalink to &quot;2.4.5、Cookie 优化&quot;">​</a></h4><p>设计 Cookie 是为了校验用户的，但在最开始被滥用，用来存储数据（4KB 的大小），由于同一域名下的每个请求都会带上 Cookie, 导致服务端压力大，同时影响带宽性能，所以 Cookie 需要进行优化</p><ul><li>减少对 <code>Cookie</code> 的使用, 存储放到 <code>Storage</code> 中</li><li>启用新域名，新域名的好处在于 <code>Cookie-Free</code></li></ul><h4 id="_2-4-6、缓存" tabindex="-1">2.4.6、缓存 <a class="header-anchor" href="#_2-4-6、缓存" aria-label="Permalink to &quot;2.4.6、缓存&quot;">​</a></h4><p>不同类型的文件对应不同的缓存策略，具体实现参考 <a href="https://yangjia23.github.io/portal-blog/frontend-graph/%E6%B5%8F%E8%A7%88%E5%99%A8/1%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98.html" target="_blank" rel="noreferrer">浏览器缓存</a> 一文</p><h2 id="三、dom-层面优化" tabindex="-1">三、DOM 层面优化 <a class="header-anchor" href="#三、dom-层面优化" aria-label="Permalink to &quot;三、DOM 层面优化&quot;">​</a></h2><h3 id="_3-1、dom-为什么这么慢" tabindex="-1">3.1、DOM 为什么这么慢？ <a class="header-anchor" href="#_3-1、dom-为什么这么慢" aria-label="Permalink to &quot;3.1、DOM 为什么这么慢？&quot;">​</a></h3><p>当在 JS 中操作 DOM 时，本质上是 JS 引擎和渲染引擎之间做交流，对 DOM 的修改本质上触发了<strong>渲染树（<code>render tree</code>）</strong> 的变化，同时可能引发样式上的修改，就会触发<strong>回流</strong>或<strong>重绘</strong></p><h3 id="_3-2、回流和重绘" tabindex="-1">3.2、回流和重绘 <a class="header-anchor" href="#_3-2、回流和重绘" aria-label="Permalink to &quot;3.2、回流和重绘&quot;">​</a></h3><ul><li>回流（<code>reflow</code>）。当我们对 DOM 的修改引发了 <strong>DOM 几何尺寸的变化</strong>（修改宽、高、隐藏元素、改变位置等）时，浏览器需要重新计算元素的几何属性（同时<strong>可能影响到其它元素的几何属性</strong>），然后再将计算结果绘制出来，这个过程就是回流（也叫重排）</li><li>重绘 (<code>repaint</code>)。对 DOM 的修改导致了<strong>样式的变化</strong>，却未影响其几何属性（修改颜色、背景色、字体等），浏览器不需要计算其几何属性，只需要直接绘制新的样式，这个过程叫重绘</li></ul><h3 id="_3-3、回流的导火索" tabindex="-1">3.3、回流的导火索 <a class="header-anchor" href="#_3-3、回流的导火索" aria-label="Permalink to &quot;3.3、回流的导火索&quot;">​</a></h3><ul><li>手动修改元素的几何属性</li><li>像获取 <code>[offset | scroll | client][Top | Left | Width | Height]</code> 等属性时，是需要通过<strong>实时计算</strong>得到的，因此浏览器为了获取这些值，也会进行回流</li><li>当调用 <code>getBoundingClientRect、 getComputedStyle</code> 、IE 的 <code>currentStyle</code> 等方法时，为了准确性和及时性，也会触发回流</li></ul><h3 id="_3-4、避免手段" tabindex="-1">3.4、避免手段 <a class="header-anchor" href="#_3-4、避免手段" aria-label="Permalink to &quot;3.4、避免手段&quot;">​</a></h3><ul><li><strong>缓存</strong>。当需要多次计算才能得到元素的最终位置，可使用 JS 变量先缓存计算结果，计算结束再去修改</li><li>避免逐条修改 CSS 样式，可使用类名去合并样式，最后添加 <strong>class 类</strong>即可</li><li>避免使用 table 布局，CSS 表达式 calc () 等、使用 CSS3 硬件加速、动画效果应用到 position 属性为 absolute 或 fixed 的元素</li><li><strong><code>DOM</code> 离线化</strong>。现将元素设置 display: none; ,将其脱离页面，设置完样式之后，再设置 display:block, 放回页面中</li><li><strong><code>Flush</code>队列</strong>。浏览器并不会每次操作 DOM 都及时的反馈一次回流与重绘，它缓存了一个 flush 队列，把我们触发的回流和重绘任务都塞进队列中，当队列中的<strong>任务多起来</strong>、或者到达<strong>一定的时间间隔</strong>、或者“<strong>不得以</strong>”的时候，将所以任务一次性出队列 ⚠️ 注意这个 “不得以”的时候，主要是我们获取上面 👆 所介绍的一些属性时，浏览器为了即时准确获取属性值，会提前将 flush 队列中的任务出队列</li></ul><h2 id="四、代码层面优化" tabindex="-1">四、代码层面优化 <a class="header-anchor" href="#四、代码层面优化" aria-label="Permalink to &quot;四、代码层面优化&quot;">​</a></h2><h3 id="_4-1、框架" tabindex="-1">4.1、框架 <a class="header-anchor" href="#_4-1、框架" aria-label="Permalink to &quot;4.1、框架&quot;">​</a></h3><p>以 Vue 框架为例，可参考官网中的<a href="https://v3.cn.vuejs.org/style-guide/" target="_blank" rel="noreferrer">风格指南</a></p><h3 id="_4-2、打包工具" tabindex="-1">4.2、打包工具 <a class="header-anchor" href="#_4-2、打包工具" aria-label="Permalink to &quot;4.2、打包工具&quot;">​</a></h3><p>以 <code>webpack</code> 为例，其优化点在于如何 <strong>提高构建速度</strong> 和 <strong>减少构建体积</strong> , 具体优化方案可参考 <a href="https://yangjia23.github.io/portal-blog/frontend-graph/%E5%B7%A5%E7%A8%8B%E5%8C%96/5%E3%80%81webpack%20%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5.html" target="_blank" rel="noreferrer">webpack 优化策略</a> 一文</p><h3 id="_4-3、代码优化" tabindex="-1">4.3、代码优化 <a class="header-anchor" href="#_4-3、代码优化" aria-label="Permalink to &quot;4.3、代码优化&quot;">​</a></h3><h4 id="_4-3-1、代码位置" tabindex="-1">4.3.1、代码位置 <a class="header-anchor" href="#_4-3-1、代码位置" aria-label="Permalink to &quot;4.3.1、代码位置&quot;">​</a></h4><p>CSS 放到 <code>&lt;head&gt;</code> 的原因？</p><ul><li>不阻塞 html 解析，尽早下载</li><li>防止被外部 JS 阻塞</li></ul><p>JS 放到 <code>&lt;body&gt;</code> 的原因？</p><ul><li>可直接访问 DOM,无需监听 DOM Ready</li><li>避免阻塞 html 的解析</li></ul><h4 id="_4-3-2、代码拆分" tabindex="-1">4.3.2、代码拆分 <a class="header-anchor" href="#_4-3-2、代码拆分" aria-label="Permalink to &quot;4.3.2、代码拆分&quot;">​</a></h4><p>使用 <code>webpack optimization.splitChunks</code> 可自行设置 chunks 的拆分规则。</p><p>JS 文件 <code>main.xxx.js</code> 拆分成以下几个文件</p><ul><li><p><code>runtime-xxx.js</code>：webpack 自带的核心文件，例如代码中使用 <code>import</code> 最终会被转换成 webpack 中提供的 <code>require</code> 方法</p></li><li><p><code>vendors-xxx.js</code>：第三方库，Vue, Vuex 会被打包进去</p></li><li><p><code>common-xxx.js</code>：公司基本的业务组件库，公共函数库等</p></li><li><p><code>page-index-xxx.js</code>：对应每个页面</p></li></ul><p>CSS 文件拆分成以下几个文件</p><ul><li><code>reset/normolize.css</code>: 重置样式</li><li><code>verdors-xxx.css</code>: 第三方库样式，Element</li><li><code>common-xxx.css</code>: 业务公共样式库</li><li><code>page-xxx.css</code>: 页面样式</li></ul><h4 id="_4-3-3、js-动态导入" tabindex="-1">4.3.3、JS 动态导入 <a class="header-anchor" href="#_4-3-3、js-动态导入" aria-label="Permalink to &quot;4.3.3、JS 动态导入&quot;">​</a></h4><ul><li><p>第三方 JS 库动态导入</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">_</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">clone</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cloneDeep</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>vue 中动态导入路由对应的组件</p><p>高级用法支持设置 <code>loading</code> 和 <code>error</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VueRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">routes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/home</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./Home.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./About.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">loading</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> LoadingComponent</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">error</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ErrorComponent</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>react 中动态导入</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Suspense</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lazy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BrowserRouter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Router</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Route</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Switch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-router-dom</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Home </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lazy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./routes/Home</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> About </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lazy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./routes/About</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">LoadingComponent</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Switch</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">exact</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">Home</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/about</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">About</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Switch</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><h4 id="_4-3-4、图片懒加载" tabindex="-1">4.3.4、图片懒加载 <a class="header-anchor" href="#_4-3-4、图片懒加载" aria-label="Permalink to &quot;4.3.4、图片懒加载&quot;">​</a></h4><p>实战（todo）</p><h4 id="_4-3-5、css-代码优化" tabindex="-1">4.3.5、CSS 代码优化 <a class="header-anchor" href="#_4-3-5、css-代码优化" aria-label="Permalink to &quot;4.3.5、CSS 代码优化&quot;">​</a></h4><ul><li>使用 uncss 删除无用的 css （慎用）</li><li>使用更高效的选择器 （不要出现 <code>* *</code> 或者 <code>div *</code> 这种奇怪组合）</li><li>减少重排。例如实现动画时，使用 <code>transform</code> 代替 <code>top、left、bottom、 right</code> 等，因为 <code>transform</code> 不会触发重排</li><li>不要使用 <code>@import url.css</code>; 因为被加载的 CSS 不能与当前文件并行下载</li></ul><h4 id="_4-3-6、js-代码优化" tabindex="-1">4.3.6、JS 代码优化 <a class="header-anchor" href="#_4-3-6、js-代码优化" aria-label="Permalink to &quot;4.3.6、JS 代码优化&quot;">​</a></h4><ul><li>尽量不用全局变量，因为全局变量太多会使变量查找变慢</li><li>尽量少操作 DOM，可以使用 <code>Fragment</code> 一次性插入多个 DOM 节点。</li><li>不要往页面中插入大量的 HTML，一定会卡。</li><li>尽量少触发重排，可以使用节流和防抖来降低重排频率。</li><li>尽量少用闭包，减少内存占用，避免内存泄漏</li></ul>`,111),o=[e];function r(t,c,i,D,y,F){return a(),n("div",null,o)}const A=s(p,[["render",r]]);export{d as __pageData,A as default};
