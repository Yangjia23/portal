import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7b60570d.js";const C=JSON.parse('{"title":"模块化规范","description":"","frontmatter":{},"headers":[],"relativePath":"fe/engineering/base.md","lastUpdated":1704246692000}'),o={name:"fe/engineering/base.md"},p=l(`<h1 id="模块化规范" tabindex="-1">模块化规范 <a class="header-anchor" href="#模块化规范" aria-label="Permalink to &quot;模块化规范&quot;">​</a></h1><blockquote><p>前端模块化如何一步一步 “进化”</p></blockquote><h2 id="一、-伪模块化" tabindex="-1">一、“伪模块化” <a class="header-anchor" href="#一、-伪模块化" aria-label="Permalink to &quot;一、“伪模块化”&quot;">​</a></h2><h3 id="_1-1、全局-function-格式" tabindex="-1">1.1、全局 <code>function</code> 格式 <a class="header-anchor" href="#_1-1、全局-function-格式" aria-label="Permalink to &quot;1.1、全局 \`function\` 格式&quot;">​</a></h3><p><strong>说明：</strong> 将不同的功能封装到不同的全局函数中</p><p><strong>代码实现:</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">m1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">m2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>缺点:</strong></p><ul><li>全局命名空间污染，容易造成命名冲突、数据不安全</li><li>模块之间看不出依赖关系</li></ul><h3 id="_1-2、namesapce-格式" tabindex="-1">1.2、<code>namesapce</code> 格式 <a class="header-anchor" href="#_1-2、namesapce-格式" aria-label="Permalink to &quot;1.2、\`namesapce\` 格式&quot;">​</a></h3><p><strong>说明：</strong> 相比于全局 <code>function</code>，减少了全局变量，解决命名冲突</p><p><strong>代码实现:</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> myModule </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>缺点:</strong></p><ul><li>数据不安全，外面可之间修改模块内部的数据</li></ul><h3 id="_1-3、iief-格式" tabindex="-1">1.3、<code>IIEF</code> 格式 <a class="header-anchor" href="#_1-3、iief-格式" aria-label="Permalink to &quot;1.3、\`IIEF\` 格式&quot;">​</a></h3><p><strong>说明：</strong></p><ul><li>匿名函数自执行调用，数据是私有的，只能通过暴露出去的方法操作</li><li>依赖的其它模块通过参数注入</li></ul><p><strong>代码实现:</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">$</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">www.baidu.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//操作数据的函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//用于暴露有函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">foo() </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">$</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">body</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">css</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">background</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//暴露方法</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">myModule</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">foo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)(window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> jQuery)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="二、commonjs-规范" tabindex="-1">二、CommonJS 规范 <a class="header-anchor" href="#二、commonjs-规范" aria-label="Permalink to &quot;二、CommonJS 规范&quot;">​</a></h2><p><strong>说明:</strong></p><p>1、每个文件都是一个模块，存在模块作用域，文件内部定义的变量、函数都是私有的</p><p>2、模块可多次加载，但<strong>只在首次加载时会运行一次</strong>，并将<strong>执行结果</strong>进行缓存，后续再次加载直接读取缓存结果</p><p>3、模块加载的顺序，按照其在代码中出现的顺序</p><p>4、模块加载机制是<strong>值拷贝</strong>，模块一旦输出个值，后续模块内部改变都影响不了这个值</p><p><strong>语法</strong></p><ul><li>导出: <code>module.exports / exports</code></li><li>导入: <code>require</code></li></ul><p>说明:</p><p>1、每个模块内部，<code>module</code> 变量代表当前模块，其 <code>exports</code> 属性代表模块对外输出接</p><p>2、加载某个模块，就是加载该模块的 <code>module.exports</code> 属性</p><p><strong>实现</strong></p><ul><li><p>服务端实现: 借助 <code>node.js</code> 特性</p></li><li><p>浏览器端实现: 借助 <code>Browserify</code></p></li><li><p>区分:</p><p>服务端，文件都存储在硬盘中，可实时读取，动态加载模块</p><p>使用 <code>Browserify</code> 在编译阶段就会打包 <code>require</code></p></li></ul><p><strong>优缺点</strong></p><ul><li>借助 <code>node.js</code> 特性，可以实现按需加载，但无法实现 <code>tree-shaking</code></li><li><code>if (true) { require(&#39;xxx&#39;)}</code></li></ul><h2 id="三、amd-规范" tabindex="-1">三、AMD 规范 <a class="header-anchor" href="#三、amd-规范" aria-label="Permalink to &quot;三、AMD 规范&quot;">​</a></h2><p><strong>说明</strong></p><p>1、<code>AMD</code> 规则支持<strong>异步加载</strong>模块，在浏览器环境，需要从服务端获取文件，所以必须支持异步，所以浏览器一般采用 <code>AMD</code> 规范</p><p><strong>语法</strong></p><ul><li>定义无依赖模块:<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">模块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li>定义依赖模块:<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">m1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">m2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">模块</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li>导入模块:<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">m1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">m2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 使用 m1/m2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><strong>实现</strong></li><li><code>require.js</code> 工具库</li><li>通过 <code>define</code> 方法，将代码定义为模块</li><li>通过 <code>require</code> 方法，实现代码的模块加载</li></ul><p><strong>优点</strong></p><ul><li>可以用于浏览器环境，并且允许非同步加载模块，</li><li>也可以根据需要<strong>动态加载</strong>模块</li></ul><h2 id="四、cmd-规范" tabindex="-1">四、CMD 规范 <a class="header-anchor" href="#四、cmd-规范" aria-label="Permalink to &quot;四、CMD 规范&quot;">​</a></h2><p><strong>说明</strong></p><p>CMD 规范整合了 CommonJS 和 AMD 规范的特点，模块的加载是异步的，模块使用时才会加载执行</p><p><strong>语法</strong></p><ul><li>使用 <code>define</code> 定义模块</li><li>使用 <code>require</code> 同步引入, <code>require.async</code> 异步引入依赖的模块</li><li>使用 <code>module.exports</code> 或 <code>exports</code> 导出模块</li></ul><p><strong>实现</strong></p><p><strong>Sea.js</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//定义有依赖的模块</span></span>
<span class="line"><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">require</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//引入依赖模块(同步)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">module2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./module2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//引入依赖模块(异步)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">require</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">async</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./module3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">m3</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//暴露模块</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">xxx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="五、umd-规范" tabindex="-1">五、UMD 规范 <a class="header-anchor" href="#五、umd-规范" aria-label="Permalink to &quot;五、UMD 规范&quot;">​</a></h2><p><strong>说明</strong></p><p>提供一个前后端跨平台的解决方案(支持<code>AMD</code>与<code>CommonJS</code>模块方式)</p><p><strong>语法</strong></p><p>1、先判断是否支持<code>Node.js</code>模块格式（<code>exports</code>是否存在），存在则使用<code>Node.js</code>模块格式</p><p>2、再判断是否支持<code>AMD</code>（<code>define</code>是否存在），存在则使用<code>AMD</code>方式加载模块</p><p>3、前两个都不存在，则将模块公开到全局（<code>window</code>或<code>global</code>）</p><h2 id="六、es-模块化规范" tabindex="-1">六、ES 模块化规范 <a class="header-anchor" href="#六、es-模块化规范" aria-label="Permalink to &quot;六、ES 模块化规范&quot;">​</a></h2><p><strong>说明</strong></p><p>1、<code>ES</code> 模块化的设计思想在于<strong>静态化</strong>，在编译时就能确定模块的依赖关系，以及输入和输出的变量</p><p>2、利用静态化的思想，有利于做 <code>tree-shaking</code> 优化，减少代码打包体检</p><p>3、<code>ES6</code> 模块输出的是值的引用，并不会缓存值</p><p><strong>语法</strong></p><ul><li>使用 <code>export / export default</code> 导出模块</li><li>使用 <code>import</code> 导入</li></ul><p><strong>其它</strong></p><p>1、<code>export / export default</code> 的区别</p><ul><li><p><code>export</code> (推荐): 在导入时需要知道模块的导出内容，利于 <code>tree-shaking</code></p></li><li><p><code>export default</code>, 将模块作为整体进行导出，在导入时可以重命名</p></li></ul><h2 id="七、区别" tabindex="-1">七、区别 <a class="header-anchor" href="#七、区别" aria-label="Permalink to &quot;七、区别&quot;">​</a></h2><blockquote><p>ES6 模块与 CommonJS 模块的差异?</p></blockquote><ul><li><p><code>CommonJS</code> 模块输出的是一个值的拷贝，<code>ES6</code> 模块输出的是值的 引用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// lib.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> counter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">incCounter</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">incCounter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./lib</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(counter) </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#82AAFF;">incCounter</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(counter) </span><span style="color:#676E95;font-style:italic;">// 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>ES6 模块是 <strong>动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块</strong>。</p></li><li><p><code>CommonJS</code> 模块是运行时加载，<code>ES6</code> 模块是编译时输出接口</p><p><code>CommonJS</code> 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。而 <code>ES6</code> 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成</p></li></ul>`,70),e=[p];function c(r,t,i,y,D,F){return n(),a("div",null,e)}const A=s(o,[["render",c]]);export{C as __pageData,A as default};
